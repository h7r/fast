{
  
    
        "post0": {
            "title": "Title",
            "content": "title: This is the Best Tool so far | date: 2020-10-12 12:00 | category: tools | tags: python, poker, notebook | slug: best-tool | authors: Wilfried F. | summary: My oldest notebook but an important tool out there | . Table of Contents . . from scipy import stats from IPython.core.pylabtools import figsize import numpy as np %pylab inline . C: Users Wilfrid Anaconda3 lib site-packages xarray core merge.py:10: FutureWarning: The Panel class is removed from pandas. Accessing it from the top-level namespace will also be removed in the next version PANDAS_TYPES = (pd.Series, pd.DataFrame, pd.Panel) . Populating the interactive namespace from numpy and matplotlib . def VarianceCalculator(totalhands, winrate = 0.0, dev = 100.0, count=1000): tri = np.zeros(0) compteur = range(0, count) hands = totalhands//100 abscisse = np.arange(start=0, stop=totalhands + 1, step=100) evy = np.linspace(start=0, stop=(hands * winrate),num=hands+1) std_dev = dev/np.sqrt(hands) plot(abscisse, evy, &quot;b&quot;, label = &quot;EV&quot;, linewidth=2) conf1 = np.linspace(start=0, stop=((winrate + std_dev)*hands),num=hands+1) conf2 = np.linspace(start=0, stop=((winrate - std_dev)*hands),num=hands+1) conf3 = np.linspace(start=0, stop=((winrate + (2*std_dev))*hands),num=hands+1) conf4 = np.linspace(start=0, stop=((winrate - (2*std_dev))*hands),num=hands+1) plot(abscisse, conf1, &quot;g--&quot;, linewidth=2, label=&quot;68%&quot;) plot(abscisse, conf2, &quot;g--&quot;, linewidth=2) plot(abscisse, conf3, &quot;g&quot;, linewidth=2, label=&quot;95%&quot;) plot(abscisse, conf4, &quot;g&quot;, linewidth=2) legend(bbox_to_anchor=(0.0, 1.0), loc=&#39;upper left&#39;) grid(True) EV = winrate*hands print(&quot;EV: &quot; + str(winrate) + &quot; bb/100 (&quot; + str(EV) + &quot; bb)&quot;) print(&quot;Standard deviation after &quot; + str(totalhands) + &quot; hands: &quot; + str(std_dev) + &quot; bb/100 (&quot; + str(std_dev * (hands)) + &quot; bb) n&quot;) print(&quot;68% confidence interval: &quot; + str(winrate + std_dev) + &quot; bb/100 (&quot; + str((winrate + std_dev)* (hands)) + &quot; bb), &quot; + str(winrate - std_dev) + &quot; bb/100 (&quot; + str((winrate - std_dev)* (hands)) + &quot; bb)&quot;) print(&quot;95% confidence interval: &quot; + str(winrate + (2*std_dev)) + &quot; bb/100 (&quot; + str((winrate + (2*std_dev))* (hands)) + &quot; bb), &quot; + str(winrate - (2*std_dev)) + &quot; bb/100 (&quot; + str((winrate - (2*std_dev))* (hands)) + &quot; bb) n&quot;) # print &quot;Probability of loss after &quot; + str(totalhands) + &quot; hands: &quot; + for i in compteur: y = np.array([0]) y = np.append(y, np.cumsum(np.random.normal(winrate, dev, hands))) plot(abscisse, y) winrateTemp = round(y[y.size-1]/hands,2) tri = np.append(tri, winrateTemp) tri = np.sort(tri) n, mm, moy = (stats.describe(tri)[0]), (stats.describe(tri)[1]), (stats.describe(tri)[2]) mini, bbmini = round(mm[0], 2), round(mm[0]*hands, 2) maxi, bbmaxi = round(mm[1], 2), round(mm[1]*hands, 2) med = np.median(tri) per = round(stats.percentileofscore(tri,winrate), 2) print(&quot;Trials: &quot; + str(n)) print(&quot;Min/max: &quot; + str(mini) + &quot; /&quot; + str(maxi) + &quot; (&quot; + str(bbmini) + &quot; bb/&quot; + str(bbmaxi) + &quot; bb)&quot;) print(&quot;Mean: &quot; + str(moy) + &quot; bb/100&quot;) print(&quot;Median: &quot; + str(med) + &quot; bb/100&quot;) print(&quot;Percentile: &quot; + str(per) + &quot;% above observed winrate (&quot; + str(winrate) + &quot; bb/100)&quot;) print(&quot;Top 10:&quot; + str(tri[-10:])) print(&quot;Bottom 10:&quot; + str(tri[0:10])) #print(&quot;Probability of running at or above 0.00 BB/100 over %d hands with a true winrate of &quot; % totalhands #+ str(winrate) + &quot;bb/100: &quot; + str(round(stats.norm.cdf(0,loc=winrate,scale=70/(sqrt(hands)))*100,2)) + &quot;%&quot;) #for i in tri: #if i&lt;0: # neg = neg+1 #print neg/len(tri), std_dev, len(tri) . # input : nombre de mains, winrate, standard deviation plt.figure(figsize=(20,10)) VarianceCalculator2(80000, 5.5, 100, count=100) . EV: 5.5 bb/100 (4400.0 bb) Standard deviation after 80000 hands: 3.5355339059327373 bb/100 (2828.4271247461897 bb) 68% confidence interval: 9.035533905932738 bb/100 (7228.42712474619 bb), 1.9644660940672627 bb/100 (1571.5728752538103 bb) 95% confidence interval: 12.571067811865476 bb/100 (10056.85424949238 bb), -1.5710678118654746 bb/100 (-1256.8542494923797 bb) Trials: 100 Min/max: -4.06 /18.25 (-3248.0 bb/14600.0 bb) Mean: 5.3485000000000005 bb/100 Median: 5.23 bb/100 Percentile: 54.0% above observed winrate (5.5 bb/100) Top 10:[10.07 11.19 12.58 12.62 12.96 13.05 13.37 13.42 13.88 18.25] Bottom 10:[-4.06 -2.41 -2.25 -1.48 -1.27 -1.1 -1.1 -0.91 -0.38 -0.38] Probability of running at or above 0.00 BB/100 over 80000 hands with a true winrate of 5.5bb/100): 1.31% .",
            "url": "https://h7r.github.io/fast/2020/10/14/test-variance-calculator.html",
            "relUrl": "/2020/10/14/test-variance-calculator.html",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://h7r.github.io/fast/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://h7r.github.io/fast/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://h7r.github.io/fast/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://h7r.github.io/fast/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}