{
  
    
  
    
        "post1": {
            "title": "The (un)expected variance at poker",
            "content": "Table of Contents . . import time import numpy as np import pandas as pd import matplotlib.pyplot as plt from pathlib import Path from functools import lru_cache from scipy import stats %pylab inline plt.style.use(&#39;fivethirtyeight&#39;) . . Populating the interactive namespace from numpy and matplotlib . @lru_cache(maxsize=512) def calculate_variance(totalhands: int, winrate: float = 0.0, dev: float = 100.0, samples: int = 1000): &quot;&quot;&quot; Another Poker Variance Calculator like Primedope&#39;s one Simulate randomly the amount of samples specified with winrate, totalhands and dev as parameters Display 20 samples, worst &amp; best samples, 95% and 68% confidence intervals, expected winnings, as well as risk of ruin up to 20% Print useful numbers about (un)expected variance Inputs: totalhands (int): number of hands e.g. desired length of the samples winrate (float): observed (or true) winrate we want to calculate the variance dev (float): standard deviation (&quot;Std Dev bb per 100 hands&quot; stat in HM2) sample (int): number of samples we want to simulate &quot;&quot;&quot; #limit number of samples if samples &gt; 1_000_000: samples = 1_000_000 start = time.time() h = totalhands//100 EV = winrate*h #standard error of the mean std_dev = dev/(h**0.5) #probability of loss with such a winrate and standard error prob_loss = stats.norm.cdf(0,loc=winrate,scale=std_dev) #x-axis x = np.arange(0, totalhands + 100, 100) #expected winnings y = [i * winrate for i in range(h+1)] #put ev values in a dataframe df = pd.DataFrame(y, columns=[&quot;ev&quot;], index=x) #confidence intervals df[&quot;conf1&quot;]= [i * (winrate + std_dev) for i in range(h+1)] df[&quot;conf2&quot;]= [i * (winrate - std_dev) for i in range(h+1)] df[&quot;conf3&quot;]= [i * (winrate + 2*std_dev) for i in range(h+1)] df[&quot;conf4&quot;]= [i * (winrate - 2*std_dev) for i in range(h+1)] #building ramdom samples with loc = winrate and scale = dev arr = np.zeros(shape=(samples,h+1)) for i in range(samples): arr[i,:]=np.cumsum(np.random.normal(winrate, dev, h+1)) #best and worst EV bottom_ten = np.argsort(arr[:,-1])[:10] top_ten = np.argsort(arr[:,-1])[-10:] #bottom line for each sample worst_downs = np.array([i for i in np.amin(arr, axis=1)]) #minimum bankroll required for each risk of ruin percentile #if the i-th percentile returns a positive value, minimum bankroll required is set to zero rr = range(0,101) min_bkr = [int(-np.percentile(worst_downs,i)) if np.percentile(worst_downs,i) &lt; 0 else 0 for i in rr] rr_df = pd.DataFrame({&quot;Risk of ruin&quot;: rr, &quot;Minimum Bankroll&quot;: min_bkr}) rr_df = rr_df.set_index(&quot;Risk of ruin&quot;) #best and worst samples df[&quot;best&quot;] = arr[top_ten[-1],:] df[&quot;worst&quot;] = arr[bottom_ten[-1],:] #print computing duration print(f&#39;Duration: {time.time() - start}s&#39;) #path to save image IMAGE_DIR = Path.cwd().parent / &quot;images&quot; plt.figure(figsize=(20,10)) #select randomly 20 samples to display excluding best and worst samples idx_array = [i for i in range(samples) if i not in [top_ten[-1],bottom_ten[-1]]] random_idx = np.random.choice(idx_array, 20, replace = False) for i in random_idx: plt.plot(x, arr[i,:],linewidth=1) #display confidence intervals as well as best and worst samples fmt=[&quot;b&quot;,&quot;g--&quot;,&quot;g--&quot;,&quot;g&quot;,&quot;g&quot;,&quot;c&quot;,&quot;y&quot;] labels=[&quot;EV&quot;,&quot;68% confidence interval&quot;,&quot;&quot;,&quot;95% confidence interval&quot;,&quot;&quot;,&quot;Best&quot;, &quot;Worst&quot;] for idx, col in enumerate(df.columns): df[col] = df[col].astype(int) plt.plot(df[col],fmt[idx],linewidth=3,label=labels[idx]) plt.title(&quot;Samples over %d hands with confidence intervals&quot; %totalhands) plt.xlabel(&quot;total hands&quot;) plt.ylabel(&quot;win/loss in big blinds&quot;) plt.legend(bbox_to_anchor=(0.0, 1.0), loc=&#39;upper left&#39;) plt.savefig(IMAGE_DIR / &quot;variance.png&quot;) plt.show() #some numbers to print ws = [winrate + std_dev, winrate - std_dev, winrate + (2*std_dev), winrate - (2*std_dev)] bb = [df.conf1.iloc[-1],df.conf2.iloc[-1],df.conf3.iloc[-1],df.conf4.iloc[-1]] std_dev_bb = int(std_dev*h) print (f&quot;Expected winnings: {winrate} bb/100 ({df.ev.iloc[-1]} bb)&quot;) print (f&quot;Standard deviation after {totalhands} hands: {std_dev: .2f} bb/100 ({std_dev_bb} bb)&quot;) print(&quot; n&quot;) print (f&quot;68% confidence interval: {ws[0]:.2f} bb/100 ({bb[0]} bb), {ws[1]:.2f} bb/100 ({bb[1]} bb)&quot;) print (f&quot;95% confidence interval: {ws[2]:.2f} bb/100 ({bb[2]} bb), {ws[3]:.2f} bb/100 ({bb[3]} bb)&quot;) print(&quot; n&quot;) print (f&quot;Top-10 over {samples} samples (bb/100): n{np.around(arr[top_ten][:,-1]/h, 2)}&quot;) print(&quot; n&quot;) print (f&quot;Bottom-10 over {samples} samples (bb/100): n{np.around(arr[bottom_ten][:,-1]/h, 2)}&quot;) print(&quot; n&quot;) print (f&quot;Probability of loss after {totalhands} hands: {prob_loss:.2%}&quot;) print(&quot; n&quot;) #display the first 20th percentiles of risk of ruin dataframe plt.figure(figsize=(20,10)) plt.plot(rr_df) plt.title(&quot;Risk of ruin n(q-th percentile over %s samples merged by their bottom line)&quot; %samples) plt.xlabel(&quot;risk of ruin %&quot;) plt.xlim(0,20) plt.xticks(range(0,22,2)) plt.ylabel(&quot;minimum bankroll in big blinds&quot;) plt.savefig(IMAGE_DIR / &quot;risk_of_ruin.png&quot;) plt.show() # return . . calculate_variance(totalhands = 80000, winrate = 5.5, dev = 100, samples=1000) . Duration: 0.06800365447998047s . Expected winnings: 5.5 bb/100 (4400 bb) Standard deviation after 80000 hands: 3.54 bb/100 (2828 bb) 68% confidence interval: 9.04 bb/100 (7228 bb), 1.96 bb/100 (1571 bb) 95% confidence interval: 12.57 bb/100 (10056 bb), -1.57 bb/100 (-1256 bb) Top-10 over 1000 samples (bb/100): [14.41 14.41 14.66 14.74 14.74 14.81 15.29 15.77 16.81 17.01] Bottom-10 over 1000 samples (bb/100): [-5.4 -5.02 -3.94 -3.3 -3.28 -3.11 -2.94 -2.84 -2.82 -2.72] Probability of loss after 80000 hands: 5.99% .",
            "url": "https://h7r.github.io/fast/notebook/jupyter/python/poker/2020/10/14/test-variance-calculator.html",
            "relUrl": "/notebook/jupyter/python/poker/2020/10/14/test-variance-calculator.html",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://h7r.github.io/fast/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://h7r.github.io/fast/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://h7r.github.io/fast/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}