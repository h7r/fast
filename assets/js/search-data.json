{
  
    
        "post0": {
            "title": "The (un)expected variance at poker",
            "content": "import time import numpy as np import pandas as pd import matplotlib.pyplot as plt from pathlib import Path from functools import lru_cache from scipy import stats %pylab inline plt.style.use(&#39;fivethirtyeight&#39;) . . Populating the interactive namespace from numpy and matplotlib . IMAGE_DIR = Path.cwd().parent / &quot;images&quot; . . WindowsPath(&#39;C:/Users/Wilfrid/Documents/GitHub/fast/images&#39;) . @lru_cache(maxsize=512) def calculate_variance(totalhands: int, winrate: float = 0.0, dev: float = 100.0, samples: int = 1000): &quot;&quot;&quot; Another Poker Variance Calculator like Primedope&#39;s one Simulate randomly the amount of samples specified with winrate, totalhands and dev as parameters Display 20 samples, worst &amp; best samples, 95% and 68% confidence intervals, expected winnings, as well as risk of ruin up to 20% Print useful numbers about (un)expected variance Inputs: totalhands (int): number of hands e.g. desired length of the samples winrate (float): observed (or true) winrate we want to calculate the variance dev (float): standard deviation (&quot;Std Dev bb per 100 hands&quot; stat in HM2) sample (int): number of samples we want to simulate &quot;&quot;&quot; #limit number of samples if samples &gt; 1_000_000: samples = 1_000_000 start = time.time() h = totalhands//100 EV = winrate*h #standard error of the sample mean std_dev = dev/(h**0.5) #probability of loss with such a winrate and standard error prob_loss = stats.norm.cdf(0,loc=winrate,scale=std_dev) #x-axis x = np.arange(0, totalhands + 100, 100) #expected winnings y = [i * winrate for i in range(h+1)] #put ev values in a dataframe df = pd.DataFrame(y, columns=[&quot;ev&quot;], index=x) #confidence intervals df[&quot;conf1&quot;]= [i * (winrate + std_dev) for i in range(h+1)] df[&quot;conf2&quot;]= [i * (winrate - std_dev) for i in range(h+1)] df[&quot;conf3&quot;]= [i * (winrate + 2*std_dev) for i in range(h+1)] df[&quot;conf4&quot;]= [i * (winrate - 2*std_dev) for i in range(h+1)] #building ramdom samples with loc = winrate and scale = dev arr = np.zeros(shape=(samples,h+1)) for i in range(samples): arr[i,:]=np.cumsum(np.random.normal(winrate, dev, h+1)) #best and worst EV bottom_ten = np.argsort(arr[:,-1])[:10] top_ten = np.argsort(arr[:,-1])[-10:] #bottom line for each sample worst_downs = np.array([i for i in np.amin(arr, axis=1)]) #minimum bankroll required for each risk of ruin percentile #if the i-th percentile returns a positive value, minimum bankroll required is set to zero rr = range(0,101) min_bkr = [int(-np.percentile(worst_downs,i)) if np.percentile(worst_downs,i) &lt; 0 else 0 for i in rr] rr_df = pd.DataFrame({&quot;Risk of ruin&quot;: rr, &quot;Minimum Bankroll&quot;: min_bkr}) rr_df = rr_df.set_index(&quot;Risk of ruin&quot;) #best and worst samples df[&quot;best&quot;] = arr[top_ten[-1],:] df[&quot;worst&quot;] = arr[bottom_ten[-1],:] #print computing duration print(f&#39;Duration: {time.time() - start}s&#39;) plt.figure(figsize=(20,10)) #select randomly 20 samples to display excluding best and worst samples idx_array = [i for i in range(samples) if i not in [top_ten[-1],bottom_ten[-1]]] random_idx = np.random.choice(idx_array, 20, replace = False) for i in random_idx: plt.plot(x, arr[i,:],linewidth=1) #display confidence intervals as well as best and worst samples fmt=[&quot;b&quot;,&quot;g--&quot;,&quot;g--&quot;,&quot;g&quot;,&quot;g&quot;,&quot;c&quot;,&quot;y&quot;] labels=[&quot;EV&quot;,&quot;68% confidence interval&quot;,&quot;&quot;,&quot;95% confidence interval&quot;,&quot;&quot;,&quot;Best&quot;, &quot;Worst&quot;] for idx, col in enumerate(df.columns): df[col] = df[col].astype(int) plt.plot(df[col],fmt[idx],linewidth=3,label=labels[idx]) plt.title(&quot;Samples over %d hands with confidence intervals&quot; %totalhands) plt.xlabel(&quot;total hands&quot;) plt.ylabel(&quot;win/loss in big blinds&quot;) plt.legend(bbox_to_anchor=(0.0, 1.0), loc=&#39;upper left&#39;) plt.savefig(IMAGE_DIR / &quot;variance.png&quot;) plt.show() #some numbers to print ws = [winrate + std_dev, winrate - std_dev, winrate + (2*std_dev), winrate - (2*std_dev)] bb = [df.conf1.iloc[-1],df.conf2.iloc[-1],df.conf3.iloc[-1],df.conf4.iloc[-1]] std_dev_bb = int(std_dev*h) print (f&quot;Expected winnings: {winrate} bb/100 ({df.ev.iloc[-1]} bb)&quot;) print (f&quot;Standard deviation after {totalhands} hands: {std_dev: .2f} bb/100 ({std_dev_bb} bb)&quot;) print(&quot; n&quot;) print (f&quot;68% confidence interval: {ws[0]:.2f} bb/100 ({bb[0]} bb), {ws[1]:.2f} bb/100 ({bb[1]} bb)&quot;) print (f&quot;95% confidence interval: {ws[2]:.2f} bb/100 ({bb[2]} bb), {ws[3]:.2f} bb/100 ({bb[3]} bb)&quot;) print(&quot; n&quot;) print (f&quot;Top-10 over {samples} samples (bb/100): {np.around(arr[top_ten][:,-1]/h, 2)}&quot;) print (f&quot;Bottom-10 over {samples} samples (bb/100): {np.around(arr[bottom_ten][:,-1]/h, 2)}&quot;) print(&quot; n&quot;) print (f&quot;Probability of loss after {totalhands} hands: {prob_loss:.2%}&quot;) print(&quot; n&quot;) #display the first 20th percentiles of risk of ruin dataframe plt.figure(figsize=(20,10)) plt.plot(rr_df) plt.title(&quot;Risk of ruin n(q-th percentile over %s samples merged by their bottom line)&quot; %samples) plt.xlabel(&quot;risk of ruin %&quot;) plt.xlim(0,20) plt.xticks(range(0,22,2)) plt.ylabel(&quot;minimum bankroll in big blinds&quot;) plt.savefig(IMAGE_DIR / &quot;risk_of_ruin.png&quot;) plt.show() #return . . calculate_variance(totalhands = 80000, winrate = 5.5, dev = 100, samples=1000) . Duration: 0.08999991416931152s . Expected winnings: 5.5 bb/100 (4400 bb) Standard deviation after 80000 hands: 3.54 bb/100 (2828 bb) 68% confidence interval: 9.04 bb/100 (7228 bb), 1.96 bb/100 (1571 bb) 95% confidence interval: 12.57 bb/100 (10056 bb), -1.57 bb/100 (-1256 bb) Top-10 over 1000 samples (bb/100): [14.38 14.49 14.53 14.6 14.64 14.76 15.11 16.02 16.94 17.29] Bottom-10 over 1000 samples (bb/100): [-5.15 -4.51 -4.16 -4.09 -3.89 -3.7 -3.36 -3.28 -3.03 -2.61] Probability of loss after 80000 hands: 5.99% .",
            "url": "https://h7r.github.io/fast/notebook/jupyter/python/poker/2020/10/14/test-variance-calculator.html",
            "relUrl": "/notebook/jupyter/python/poker/2020/10/14/test-variance-calculator.html",
            "date": " • Oct 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://h7r.github.io/fast/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://h7r.github.io/fast/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://h7r.github.io/fast/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://h7r.github.io/fast/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}